version: '3.4'

services:
  nginx:
    container_name: nginx_web
    image: nginx
    build:
      context: nginx_Dockerfile
      dockerfile: Dockerfile
    networks:
      - ricky_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/nginx.conf
#      - ./nginx:/etc/nginx/conf.d
#      - ./conf/:/etc/nginx/conf.d
#      - ./conf/:/etc/nginx/conf.d/nginx.conf
    # ssl 인증서 확인 후 적용. docker 컨테이너 접속 후 경로도 확인하자.
    # [호스트폴더가 생성되는 경로 / 파일] : [볼륨 마운트할 컨테이너 경로]
      - ./nginx/var/lib/letsencrypt:/var/lib/letsencrypt
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./content:/var/www
     # ./nginx_Dockerfile/nginx.conf:/etc/nginx/nginx.conf 로 진행시켜~
      
    links:
      - was:spring
      - react:react
#    entrypoint:
#      - "nginx"
#      - "-g"
#      - "daemon off;"
    depends_on:
      - was
      - react
  was:
    image: spring
    container_name: spring_was
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - ricky_net
    links:
      - db:db_mysql
      - react:react
    depends_on:
      - db
  db:
    image: mysql
    container_name: db_mysql
    networks:
      - ricky_net
    environment:
      - MYSQL_DATABASE=ricky_schema
      - MYSQL_USER=ricky
      - MYSQL_PASSWORD=1234
      - MYSQL_ROOT_PASSWORD=password
    volumes:
      - /build/DB/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
  react:
    image: react
    container_name: react_web
    build:
      context: ./react_front
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - ricky_net
    links:
      - was:spring
    volumes:
      - /usr/src/app/node_modules
      # volumes 마운트 경로 
      - ./:/usr/src/app
    depends_on:
      - was

networks:
  ricky_net:

  

